import numpy as np
import json
import os
import random

# Q-Learning Parameters
LEARNING_RATE = 0.1
DISCOUNT_FACTOR = 0.95
EXPLORATION_RATE = 0.1
Q_TABLE_FILE = "q_table.json"


class TicTacToe:
    def __init__(self):
        self.board = [' '] * 9
        self.q_table = self.load_q_table()
        self.add_neppotjes()

    def reset(self):
        self.board = [' '] * 9
        return self.get_state()

    def load_q_table(self):
        if os.path.exists(Q_TABLE_FILE):
            with open(Q_TABLE_FILE, 'r') as f:
                return json.load(f)
        return {}

    def save_q_table(self):
        with open(Q_TABLE_FILE, 'w') as f:
            json.dump(self.q_table, f)

    def add_neppotjes(self):
        neppotjes = {
    "         ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X        ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    " O       ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X X      ": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    " O O     ": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X O      ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
    "X  O     ": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
    "X O O    ": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "O O X    ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "X X O    ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
    "X O X O  ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X O O X  ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "O X O X  ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X X O    ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
    " O X     ": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],

    "X O      ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
    " O X     ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "X O X    ": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
    "X X O    ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
    " O O X   ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    " O O O   ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "X X X    ": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "O O O    ": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X O X O  ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "O O X X  ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],

    "XX O     ": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
    "XO O     ": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
    "XOO      ": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X O O    ": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X O X    ": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    " O O X   ": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X O O    ": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X X O    ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
    "O X O    ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
    "X O X O  ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],

    "O X X    ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "X O O O  ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
    "X O O X  ": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
    "O X O O  ": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
    "X X O O  ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "O X X O  ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "O X O O  ": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
    "X O O X  ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "O O O    ": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "O O O X  ": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],

    "O X O X  ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X O X O  ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X X O O  ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "O O X X  ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X O O X  ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "O O X O  ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "O X X O  ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "O O X O  ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "O O X O  ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "O X O    ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],

    "O O O X  ": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X O X X  ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "X O O X  ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "X O X O  ": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
    "O O X O  ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X X O O  ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "X O X X  ": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
    "O X X O  ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    "X O X O  ": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
    "X O X O  ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
}


        for key, value in neppotjes.items():
            if key not in self.q_table:
                self.q_table[key] = value

    def display_board(self):
        print("\n")
        for row in [self.board[i:i + 3] for i in range(0, 9, 3)]:
            print("| " + " | ".join(row) + " |")
        print("\n")

    def get_state(self):
        return "".join(self.board)

    def available_moves(self):
        return [i for i, x in enumerate(self.board) if x == ' ']

    def make_move(self, position, player):
        if self.board[position] == ' ':
            self.board[position] = player
            return True
        return False

    def check_winner(self):
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
            [0, 4, 8], [2, 4, 6]  # Diagonals
        ]
        for combo in winning_combinations:
            if self.board[combo[0]] == self.board[combo[1]] == self.board[combo[2]] != ' ':
                return self.board[combo[0]]
        if ' ' not in self.board:
            return 'Tie'
        return None

    def reward(self, winner, ai_player):
        if winner == ai_player:
            return 1
        elif winner == 'Tie':
            return 0.5
        elif winner is None:
            return 0
        else:
            return -1

    def block_opponent_move(self):
        """Controleer of de mens een winnende zet kan doen en blokkeer deze."""
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
            [0, 4, 8], [2, 4, 6]  # Diagonals
        ]
        for combo in winning_combinations:
            values = [self.board[i] for i in combo]
            if values.count('X') == 2 and values.count(' ') == 1:  # Mens heeft 2 'X's en 1 lege plek
                move = combo[values.index(' ')]  # Vind de lege plek en blokkeer die
                if move in self.available_moves():
                    return move
        return None

    def ai_move(self, player):
        state = self.get_state()
        if state not in self.q_table:
            self.q_table[state] = [0.0] * 9  # Zorg ervoor dat dit een float-lijst is.

        # Check for a winning move
        for move in self.available_moves():
            self.board[move] = player  # Simuleer de zet
            if self.check_winner() == player:  # Controleer of deze zet de AI laat winnen
                self.board[move] = ' '  # Reset de simulatie
                self.make_move(move, player)  # Voer de winnende zet uit
                return move
            self.board[move] = ' '  # Reset de simulatie

        # Explore or exploit Q-values
        if random.uniform(0, 1) < EXPLORATION_RATE:
            move = random.choice(self.available_moves())
        else:
            q_values = np.array(self.q_table[state], dtype=float)  # Zet expliciet om naar float-array.
            for i in range(9):
                if i not in self.available_moves():
                    q_values[i] = -float('inf')  # Zet de niet-beschikbare zetten op -inf.
            move = int(np.argmax(q_values))

        self.make_move(move, player)
        return move

    def update_q_table(self, state, action, reward, next_state):
        # Controleer of de huidige staat al in de Q-tabel staat, zo niet, initialiseer met nullen
        if state not in self.q_table:
            self.q_table[state] = [0] * 9  # 9 mogelijke zetten in tic-tac-toe

        # Controleer of de volgende staat al in de Q-tabel staat, zo niet, initialiseer met nullen
        if next_state not in self.q_table:
            self.q_table[next_state] = [0] * 9

        old_value = self.q_table[state][action]
        next_max = max(self.q_table[next_state])  # De beste toekomstige waarde
        new_value = (1 - LEARNING_RATE) * old_value + LEARNING_RATE * (reward + DISCOUNT_FACTOR * next_max)
        self.q_table[state][action] = new_value


def main():
    game = TicTacToe()
    human_player = 'X'
    ai_player = 'O'

    while True:
        game.reset()
        print("Welkom bij Boter, Kaas, AI!")
        print("Je speelt als 'X'.")
        current_player = human_player if random.choice([True, False]) else ai_player

        while True:
            game.display_board()
            winner = game.check_winner()
            if winner:
                game.display_board()
                if winner == 'Tie':
                    print("Gelijkspel!")
                else:
                    print(f"De winnaar is: {winner}")
                break  # Breek de innerlijke lus als er een winnaar is

            if current_player == human_player:
                while True:  # Blijf vragen totdat een geldige zet wordt gegeven
                    try:
                        move = int(input("Kies je zet (1-9): ")) - 1  # Verwerk invoer als 1-9 en pas aan naar 0-8
                        if move in game.available_moves():
                            break  # Geldige zet, breek de lus
                        else:
                            print("Ongeldige zet. Kies een beschikbare plek.")
                    except ValueError:
                        print("Ongeldige invoer. Voer een cijfer in tussen 1 en 9.")
                game.make_move(move, human_player)
            else:
                state = game.get_state()
                move = game.ai_move(ai_player)
                next_state = game.get_state()
                reward = game.reward(winner, ai_player)
                game.update_q_table(state, move, reward, next_state)

            current_player = human_player if current_player == ai_player else ai_player

        game.save_q_table()

        # Vraag om opnieuw te spelen, inclusief validatie
        while True:
            opnieuw_spelen = input("Wil je opnieuw spelen? (j/n): ").lower()
            if opnieuw_spelen in ['j', 'n']:
                break
            print("Ongeldige invoer. Antwoord met 'j' voor ja of 'n' voor nee.")

        if opnieuw_spelen == 'n':
            break


if __name__ == "__main__":
    main()
